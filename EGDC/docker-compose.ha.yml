version: '3.8'

# High Availability EGDC Infrastructure
# This configuration provides:
# - Load balancing with HAProxy
# - Database replication with PostgreSQL
# - Redis clustering for session management
# - Horizontal scaling for application instances
# - Health monitoring and auto-recovery

networks:
  egdc-network:
    driver: bridge
  egdc-internal:
    driver: bridge
    internal: true

volumes:
  postgres-primary-data:
  postgres-replica-data:
  redis-cluster-data-1:
  redis-cluster-data-2:
  redis-cluster-data-3:
  prometheus-data:
  grafana-data:

services:
  # Load Balancer (HAProxy)
  load-balancer:
    image: haproxy:2.8-alpine
    container_name: egdc-load-balancer
    ports:
      - "80:80"
      - "443:443"
      - "8404:8404"  # HAProxy stats
    volumes:
      - ./infrastructure/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./infrastructure/ssl:/etc/ssl/certs:ro
    networks:
      - egdc-network
      - egdc-internal
    depends_on:
      - egdc-app-1
      - egdc-app-2
      - egdc-app-3
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8404/stats"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Application Instances (Horizontal Scaling)
  egdc-app-1:
    build: 
      context: .
      dockerfile: Dockerfile.production
    container_name: egdc-app-1
    environment:
      - NODE_ENV=production
      - INSTANCE_ID=app-1
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres-primary:5432/egdc
      - DATABASE_REPLICA_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres-replica:5432/egdc
      - REDIS_URL=redis://redis-cluster:7000,redis://redis-cluster:7001,redis://redis-cluster:7002
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
    networks:
      - egdc-internal
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-cluster:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  egdc-app-2:
    build: 
      context: .
      dockerfile: Dockerfile.production
    container_name: egdc-app-2
    environment:
      - NODE_ENV=production
      - INSTANCE_ID=app-2
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres-primary:5432/egdc
      - DATABASE_REPLICA_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres-replica:5432/egdc
      - REDIS_URL=redis://redis-cluster:7000,redis://redis-cluster:7001,redis://redis-cluster:7002
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
    networks:
      - egdc-internal
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-cluster:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  egdc-app-3:
    build: 
      context: .
      dockerfile: Dockerfile.production
    container_name: egdc-app-3
    environment:
      - NODE_ENV=production
      - INSTANCE_ID=app-3
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres-primary:5432/egdc
      - DATABASE_REPLICA_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres-replica:5432/egdc
      - REDIS_URL=redis://redis-cluster:7000,redis://redis-cluster:7001,redis://redis-cluster:7002
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
    networks:
      - egdc-internal
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-cluster:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # PostgreSQL Primary Database
  postgres-primary:
    image: postgres:15-alpine
    container_name: postgres-primary
    environment:
      - POSTGRES_DB=egdc
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=${POSTGRES_REPLICATION_PASSWORD}
    volumes:
      - postgres-primary-data:/var/lib/postgresql/data
      - ./infrastructure/postgres/primary:/docker-entrypoint-initdb.d
      - ./infrastructure/postgres/postgresql-primary.conf:/etc/postgresql/postgresql.conf
    networks:
      - egdc-internal
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d egdc"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # PostgreSQL Replica Database
  postgres-replica:
    image: postgres:15-alpine
    container_name: postgres-replica
    environment:
      - POSTGRES_DB=egdc
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGUSER=postgres
      - POSTGRES_PRIMARY_HOST=postgres-primary
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=${POSTGRES_REPLICATION_PASSWORD}
    volumes:
      - postgres-replica-data:/var/lib/postgresql/data
      - ./infrastructure/postgres/replica:/docker-entrypoint-initdb.d
      - ./infrastructure/postgres/postgresql-replica.conf:/etc/postgresql/postgresql.conf
    networks:
      - egdc-internal
    depends_on:
      postgres-primary:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d egdc"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # Redis Cluster Node 1
  redis-cluster-1:
    image: redis:7-alpine
    container_name: redis-cluster-1
    ports:
      - "7000:7000"
    volumes:
      - redis-cluster-data-1:/data
      - ./infrastructure/redis/redis-cluster.conf:/usr/local/etc/redis/redis.conf
    networks:
      - egdc-internal
    command: redis-server /usr/local/etc/redis/redis.conf --port 7000 --cluster-enabled yes --cluster-config-file nodes-7000.conf --cluster-node-timeout 5000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7000", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cluster Node 2
  redis-cluster-2:
    image: redis:7-alpine
    container_name: redis-cluster-2
    ports:
      - "7001:7001"
    volumes:
      - redis-cluster-data-2:/data
      - ./infrastructure/redis/redis-cluster.conf:/usr/local/etc/redis/redis.conf
    networks:
      - egdc-internal
    command: redis-server /usr/local/etc/redis/redis.conf --port 7001 --cluster-enabled yes --cluster-config-file nodes-7001.conf --cluster-node-timeout 5000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7001", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cluster Node 3
  redis-cluster-3:
    image: redis:7-alpine
    container_name: redis-cluster-3
    ports:
      - "7002:7002"
    volumes:
      - redis-cluster-data-3:/data
      - ./infrastructure/redis/redis-cluster.conf:/usr/local/etc/redis/redis.conf
    networks:
      - egdc-internal
    command: redis-server /usr/local/etc/redis/redis.conf --port 7002 --cluster-enabled yes --cluster-config-file nodes-7002.conf --cluster-node-timeout 5000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7002", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cluster Setup (one-time initialization)
  redis-cluster-setup:
    image: redis:7-alpine
    container_name: redis-cluster-setup
    networks:
      - egdc-internal
    depends_on:
      redis-cluster-1:
        condition: service_healthy
      redis-cluster-2:
        condition: service_healthy
      redis-cluster-3:
        condition: service_healthy
    command: >
      sh -c "
        redis-cli --cluster create 
        redis-cluster-1:7000 
        redis-cluster-2:7001 
        redis-cluster-3:7002 
        --cluster-replicas 0 --cluster-yes
      "
    restart: "no"

  # Create an alias for redis-cluster access
  redis-cluster:
    image: redis:7-alpine
    container_name: redis-cluster-proxy
    networks:
      - egdc-internal
    depends_on:
      redis-cluster-setup:
        condition: service_completed_successfully
    command: >
      sh -c "
        while true; do
          redis-cli -c -h redis-cluster-1 -p 7000 ping && break
          sleep 5
        done
        echo 'Redis cluster is ready'
        tail -f /dev/null
      "
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-c", "-h", "redis-cluster-1", "-p", "7000", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./infrastructure/prometheus/alerts:/etc/prometheus/alerts:ro
    networks:
      - egdc-internal
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    networks:
      - egdc-internal
    depends_on:
      prometheus:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - egdc-internal
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped

  # Alertmanager for Alert Management
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./infrastructure/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    networks:
      - egdc-internal
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backup Service
  backup-service:
    image: postgres:15-alpine
    container_name: backup-service
    volumes:
      - ./backups:/backups
      - ./infrastructure/backup/backup-script.sh:/backup-script.sh:ro
    networks:
      - egdc-internal
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}  # Daily at 2 AM
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-7}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BACKUP_BUCKET=${S3_BACKUP_BUCKET}
    depends_on:
      postgres-primary:
        condition: service_healthy
    command: >
      sh -c "
        apk add --no-cache aws-cli
        chmod +x /backup-script.sh
        echo '${BACKUP_SCHEDULE} /backup-script.sh' > /etc/crontabs/root
        crond -f
      "
    restart: unless-stopped

  # Log Aggregation with Fluentd
  fluentd:
    image: fluent/fluentd:v1.16-1
    container_name: fluentd
    volumes:
      - ./infrastructure/fluentd/fluent.conf:/fluentd/etc/fluent.conf
      - ./logs:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - egdc-internal
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    restart: unless-stopped

  # Health Check Service
  health-checker:
    image: alpine:latest
    container_name: health-checker
    volumes:
      - ./infrastructure/health-check/health-check.sh:/health-check.sh:ro
    networks:
      - egdc-internal
    environment:
      - CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-60}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - ALERT_THRESHOLD=${ALERT_THRESHOLD:-3}
    command: >
      sh -c "
        apk add --no-cache curl jq
        chmod +x /health-check.sh
        while true; do
          /health-check.sh
          sleep ${CHECK_INTERVAL:-60}
        done
      "
    restart: unless-stopped

  # Auto-scaling Service (monitors load and scales instances)
  autoscaler:
    image: alpine:latest
    container_name: autoscaler
    volumes:
      - ./infrastructure/autoscaler/autoscaler.sh:/autoscaler.sh:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - egdc-internal
    environment:
      - SCALE_UP_THRESHOLD=${SCALE_UP_THRESHOLD:-80}
      - SCALE_DOWN_THRESHOLD=${SCALE_DOWN_THRESHOLD:-30}
      - MIN_INSTANCES=${MIN_INSTANCES:-3}
      - MAX_INSTANCES=${MAX_INSTANCES:-10}
      - CHECK_INTERVAL=${AUTOSCALE_CHECK_INTERVAL:-300}
    command: >
      sh -c "
        apk add --no-cache curl jq docker-cli
        chmod +x /autoscaler.sh
        while true; do
          /autoscaler.sh
          sleep ${CHECK_INTERVAL:-300}
        done
      "
    restart: unless-stopped
    depends_on:
      prometheus:
        condition: service_healthy